// Autogenerated from Pigeon (v13.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct ScanQRCodeResult {
  var errorMessage: String? = nil
  var code: String? = nil

  static func fromList(_ list: [Any?]) -> ScanQRCodeResult? {
    let errorMessage: String? = nilOrValue(list[0])
    let code: String? = nilOrValue(list[1])

    return ScanQRCodeResult(
      errorMessage: errorMessage,
      code: code
    )
  }
  func toList() -> [Any?] {
    return [
      errorMessage,
      code,
    ]
  }
}
private class QRCodeScannerApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return ScanQRCodeResult.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class QRCodeScannerApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ScanQRCodeResult {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class QRCodeScannerApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return QRCodeScannerApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return QRCodeScannerApiCodecWriter(data: data)
  }
}

class QRCodeScannerApiCodec: FlutterStandardMessageCodec {
  static let shared = QRCodeScannerApiCodec(readerWriter: QRCodeScannerApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol QRCodeScannerApi {
  func scanQRCode() throws -> ScanQRCodeResult
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class QRCodeScannerApiSetup {
  /// The codec used by QRCodeScannerApi.
  static var codec: FlutterStandardMessageCodec { QRCodeScannerApiCodec.shared }
  /// Sets up an instance of `QRCodeScannerApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: QRCodeScannerApi?) {
    let scanQRCodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.qr_scanner_plugin.QRCodeScannerApi.scanQRCode", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      scanQRCodeChannel.setMessageHandler { _, reply in
        do {
          let result = try api.scanQRCode()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      scanQRCodeChannel.setMessageHandler(nil)
    }
  }
}
